编写Dockerfile文件
FROM node:8.4
COPY . /app
WORKDIR /app
RUN npm install --registry=https://registry.npm.taobao.org
EXPOSE 3000

FROM node:8.4：该 image 文件继承官方的 node image，冒号表示标签，这里标签是8.4，即8.4版本的 node。
COPY . /app：将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的/app目录。
WORKDIR /app：指定接下来的工作路径为/app。
RUN npm install：在/app目录下，运行npm install命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。
EXPOSE 3000：将容器 3000 端口暴露出来， 允许外部连接这个端口。


创建镜像
docker build -t ott-dns-info-docker:latest .
docker commit -m "" -a "" [containerID] ott-dns-info-docker:v1.0

删除镜像
docker rmi [imageID]

查看镜像
docker images

修改镜像名称
docker tag 457541f7f8de ott-dns-info-docker:v1.0

生成容器
docker run --name [containerName] -p 8000:3000 -it koa-demo:0.0.1 /bin/bash
-t:在新容器内指定一个伪终端或终端。
-i:允许你对容器内的标准输入 (STDIN) 进行交互。
-d: 后台运行

开启正在运行的容器
docker exec -it [containerID] bash


开启容器
docker start [containerID]


停止容器
docker stop [containerID]


删除容器
docker rm [containerID]


查看正在运行的容器
docker ps
docker ps --no-trunc 禁止缩略

查看容器日志
docker logs [containerID]

查看容器IP
docker inspect 容器ID | grep IPAddress

查看所有的容器
docker ps -a

从容器里面拷文件到宿主机
docker cp [containerID]:/home/test.js /home

从宿主机拷文件到容器里面
docker cp /home/test.js [containerID]:/home

备份镜像
docker save [imageId] > /home/myubuntu-save-1204.tar  

恢复镜像
docker load < /home/myubuntu-save-1204.tar

导出容器
docker export [containerId] > /home/myubuntu-save-1204.tar

导入容器
docker import /home/myubuntu-save-1204.tar mysql:ott
cat test.tar | sudo docker import - mysql:ott


解决Windows10下无法对docker容器进行端口访问
docker-machine ip default
http://192.168.99.100:80
ip addr show docker0
http://172.17.0.1

docker run --name ecast-web -p 8001:8001 -v /e/mywork/ecast-web:/home/ecast-web -it 520293d9f787
docker run --name ecast-php -p 8443:8001 -v E:\mywork\ecast-web-old:/var/www/html -d img4


docker pull ubuntu:18.04
docker run --name ubuntu -it ubuntu:18.04 /bin/bash


docker pull mongo
docker run -p 27017:27017 --name mongo -v $PWD/db:/data/db -d mongo:3.2

docker pull elasticsearch:7.4.2
docker run -p 9200:9200 --name elasticsearch -d elasticsearch:7.4.2 

docker pull mysql:8.0
docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0
docker run -p 3306:3306 --name mysql -v $PWD/mysqldb:/docker-entrypoint-initdb.d -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0

docker启动mysql容器，开启外部访问
docker exec -it mysql bash
mysql -u root -p
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;
ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';
FLUSH PRIVILEGES;

use mysql;
update user set host = '%' where user = 'root';

select host,user from user;

docker run -p 3306:3306 --name mymysql -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6
-p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口。
-v -v $PWD/conf:/etc/mysql/conf.d：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。
-v $PWD/logs:/logs：将主机当前目录下的 logs 目录挂载到容器的 /logs。
-v $PWD/data:/var/lib/mysql ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。
-e MYSQL_ROOT_PASSWORD=123456：初始化 root 用户的密码
#登录mysql
docker exec -it mysql bash
mysql -u root -p
#修改密码
ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';
#添加远程登录用户
CREATE USER 'user2'@'%' IDENTIFIED WITH mysql_native_password BY '123456';
GRANT ALL PRIVILEGES ON *.* TO 'user2'@'%';
FLUSH PRIVILEGES;

data数据目录
/var/lib/mysql

docker pull python:3.6
docker run -p 4040:80 --name python-app -it python-app:latest

docker run  -v $PWD/myapp:/usr/src/myapp  -w /usr/src/myapp python:3.6 python helloworld.py
-w /usr/src/myapp :指定容器的/usr/src/myapp目录为工作目录


docker pull nginx
docker run -d -p 8082:80 --name runoob-nginx-test-web -v ~/nginx/www:/usr/share/nginx/html -v ~/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v ~/nginx/logs:/var/log/nginx nginx
docker run --name nginx-test -p 8082:80 -v /media/xian/Work/docker/nginx/html:/usr/share/nginx/html -d nginx
-p 8082:80： 将容器的 80 端口映射到主机的 8082 端口。
--name runoob-nginx-test-web：将容器命名为 runoob-nginx-test-web。
-v ~/nginx/www:/usr/share/nginx/html：将我们自己创建的 www 目录挂载到容器的 /usr/share/nginx/html。
-v ~/nginx/conf/nginx.conf:/etc/nginx/nginx.conf：将我们自己创建的 nginx.conf 挂载到容器的 /etc/nginx/nginx.conf。
-v ~/nginx/logs:/var/log/nginx：将我们自己创建的 logs 挂载到容器的 /var/log/nginx。

